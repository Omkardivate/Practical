-------------------------PYTHON-------------------------------
n = 4
W = 16
p = [40, 30, 50, 10]
w = [2, 5, 10, 5]
p_per_weight = [20, 6, 5, 2]


class Priority_Queue:
    def __init__(self):
        self.pqueue = []
        self.length = 0

    def insert(self, node):
        for i in self.pqueue:
            get_bound(i)
        i = 0
        while i < len(self.pqueue):
            if self.pqueue[i].bound > node.bound:
                break
            i += 1
        self.pqueue.insert(i, node)
        self.length += 1

    def print_pqueue(self):
        for i in list(range(len(self.pqueue))):
            print("pqueue", i, "=", self.pqueue[i].bound)

    def remove(self):
        try:
            result = self.pqueue.pop()
            self.length -= 1
        except:
            print("Priority queue is empty, cannot pop from empty list.")
        else:
            return result


class Node:
    def __init__(self, level, profit, weight):
        self.level = level
        self.profit = profit
        self.weight = weight
        self.items = []


def get_bound(node):
    if node.weight >= W:
        return 0
    else:
        result = node.profit
        j = node.level + 1
        totweight = node.weight
        while j <= n - 1 and totweight + w[j] <= W:
            totweight = totweight + w[j]
            result = result + p[j]
            j += 1
        k = j
        if k <= n - 1:
            result = result + (W - totweight) * p_per_weight[k]
        return result


nodes_generated = 0
pq = Priority_Queue()

v = Node(-1, 0, 0)  # v initialized to be the root with level = 0, profit = $0, weight = 0
nodes_generated += 1
maxprofit = 0  # maxprofit initialized to $0
v.bound = get_bound(v)
# print("v.bound = ", v.bound)


pq.insert(v)

while pq.length != 0:

    v = pq.remove()  # remove node with best bound
    #    print("\nNode removed from pq.")
    #    print("Priority Queue: ")
    #    pq.print_pqueue()

    #    print("\nmaxprofit = ", maxprofit)
    #    print("Parent Node: ")
    #    print("v.level = ", v.level, "v.profit = ", v.profit, "v.weight = ", v.weight, "v.bound = ", v.bound, "v.items = ", v.items)

    if v.bound > maxprofit:  # check if node is still promising
        # set u to the child that includes the next item
        u = Node(0, 0, 0)
        nodes_generated += 1
        u.level = v.level + 1
        u.profit = v.profit + p[u.level]
        u.weight = v.weight + w[u.level]
        # take v's list and add u's list
        u.items = v.items.copy()
        u.items.append(u.level)  # adds next item
        #        print("child that includes the next item: ")
        #        print("Child 1:")
        #        print("u.level = ", u.level, "u.profit = ", u.profit, "u.weight = ", u.weight)
        #        print("u.items = ", u.items)
        if u.weight <= W and u.profit > maxprofit:
            # update maxprofit
            maxprofit = u.profit
            #            print("\nmaxprofit updated = ", maxprofit)
            bestitems = u.items
        #            print("bestitems = ", bestitems)
        u.bound = get_bound(u)
        #        print("u.bound = ", u.bound)
        if u.bound > maxprofit:
            pq.insert(u)
        #            print("Node u1 inserted into pq.")
        #            print("Priority Queue : ")
        #            pq.print_pqueue()
        # set u to the child that does not include the next item
        u2 = Node(u.level, v.profit, v.weight)
        nodes_generated += 1
        u2.bound = get_bound(u2)
        u2.items = v.items.copy()
        #        print("child that doesn't include the next item: ")
        #        print("Child 2:")
        #        print("u2.level = ", u2.level, "u2.profit = ", u2.profit, "u2.weight = ", u2.weight, "u2.bound = ", u2.bound)
        #        print("u2.items = ", u2.items)
        if u2.bound > maxprofit:
            pq.insert(u2)
#            print("Node u2 inserted into pq.")
#            print("Priority Queue : ")
#            pq.print_pqueue()


print("\nEND maxprofit = ", maxprofit, "\nnodes generated = ", nodes_generated)
print("bestitems = ", bestitems)

--------------------------JAVA--------------------------
import java.util.*;
class Item {

	// Stores the weight of items
	float weight;

	// Stores the values of items
	int value;

	// Stores the index of items
	int idx;
	public Item() {}
	public Item(int value, float weight, int idx)
	{
		this.value = value;
		this.weight = weight;
		this.idx = idx;
	}
}

class Node {
	// Upper Bound: Best case (Fractional Knapsack)
	float ub;

	// Lower Bound: Worst case (0/1)
	float lb;

	// Level of the node in the decision tree
	int level;

	// Stores if the current item is selected or not
	boolean flag;

	// Total Value: Stores the sum of the values of the items included
	float tv;

	// Total Weight: Stores the sum of the weights of included items
	float tw;
	public Node() {}
	public Node(Node cpy)
	{
		this.tv = cpy.tv;
		this.tw = cpy.tw;
		this.ub = cpy.ub;
		this.lb = cpy.lb;
		this.level = cpy.level;
		this.flag = cpy.flag;
	}
}

// Comparator to sort based on lower bound
class sortByC implements Comparator<Node> {
	public int compare(Node a, Node b)
	{
		boolean temp = a.lb > b.lb;
		return temp ? 1 : -1;
	}
}

class sortByRatio implements Comparator<Item> {
	public int compare(Item a, Item b)
	{
		boolean temp = (float)a.value / a.weight > (float)b.value/ b.weight;
		return temp ? -1 : 1;
	}
}

class knapsack {

	private static int size;
	private static float capacity;

	// Function to calculate upper bound (includes fractional part of the items)
	static float upperBound(float tv, float tw,int idx, Item arr[])
	{
		float value = tv;
		float weight = tw;
		for (int i = idx; i < size; i++) {
			if (weight + arr[i].weight<= capacity) {
				weight += arr[i].weight;
				value -= arr[i].value;
			}
			else {
				value -= (float)(capacity- weight)/ arr[i].weight * arr[i].value;
				break;
			}
		}
		return value;
	}

	// Calculate lower bound (doesn't include fractional part of items)
	static float lowerBound(float tv, float tw,int idx, Item arr[])
	{
		float value = tv;
		float weight = tw;
		for (int i = idx; i < size; i++) {
			if (weight + arr[i].weight <= capacity) {
				weight += arr[i].weight;
				value -= arr[i].value;
			}
			else {
				break;
			}
		}
		return value;
	}

	static void assign(Node a, float ub, float lb, int level, boolean flag, float tv, float tw)
	{
		a.ub = ub;
		a.lb = lb;
		a.level = level;
		a.flag = flag;
		a.tv = tv;
		a.tw = tw;
	}

	public static void solve(Item arr[])
	{
		// Sort the items based on the profit/weight ratio
		Arrays.sort(arr, new sortByRatio());

		Node current, left, right;
		current = new Node();
		left = new Node();
		right = new Node();

		// min_lb -> Minimum lower bound of all the nodes explored

		// final_lb -> Minimum lower bound of all the paths that reached the final level
		float minLB = 0, finalLB= Integer.MAX_VALUE;
		current.tv = current.tw = current.ub= current.lb = 0;
		current.level = 0;
		current.flag = false;

		// Priority queue to store elements based on lower bounds
		PriorityQueue<Node> pq= new PriorityQueue<Node>(new sortByC());

		// Insert a dummy node
		pq.add(current);

		// curr_path -> Boolean array to store at every index if the element is included or not

		// final_path -> Boolean array to store the result of selection array when it reached the last level
		boolean currPath[] = new boolean[size];
		boolean finalPath[] = new boolean[size];

		while (!pq.isEmpty()) {
			current = pq.poll();
			if (current.ub > minLB || current.ub >= finalLB) {
				// if the current node's best case value is not optimal than minLB,
				// then there is no reason to explore that node. Including
				// finalLB eliminates all those paths whose best values is equal to the finalLB
				continue;
			}

			if (current.level != 0)
				currPath[current.level - 1]= current.flag;

			if (current.level == size) {
				if (current.lb < finalLB) {
					// Reached last level
					for (int i = 0; i < size; i++)
						finalPath[arr[i].idx]= currPath[i];
					finalLB = current.lb;
				}
				continue;
			}

			int level = current.level;

			// right node -> Excludes current item Hence, cp, cw will obtain the value of that of parent
			assign(right, upperBound(current.tv, current.tw, level + 1, arr),
				lowerBound(current.tv, current.tw, level + 1, arr), level + 1, false, current.tv, current.tw);

			if (current.tw + arr[current.level].weight <= capacity) {

				// left node -> includes current item c and lb should be calculated including the current item.
				left.ub = upperBound(current.tv - arr[level].value, current.tw + arr[level].weight, level + 1, arr);
				left.lb = lowerBound(current.tv - arr[level].value, current.tw + arr[level].weight, level + 1, arr);
				assign(left, left.ub, left.lb, level + 1, true, current.tv - arr[level].value, current.tw+ arr[level].weight);
			}

			// If the left node cannot be inserted
			else {
				// Stop the left node from getting added to the priority queue
				left.ub = left.lb = 1;
			}

			// Update minLB
			minLB = Math.min(minLB, left.lb);
			minLB = Math.min(minLB, right.lb);

			if (minLB >= left.ub)
				pq.add(new Node(left));
			if (minLB >= right.ub)
				pq.add(new Node(right));
		}
		System.out.println("Items taken"+ "into the knapsack are");
		for (int i = 0; i < size; i++) {
			if (finalPath[i])
				System.out.print("1 ");
			else
				System.out.print("0 ");
		}
		System.out.println("\nMaximum profit"+ " is " + (-finalLB));
	}

	// Driver code
	public static void main(String args[])
	{
		size = 4;
		capacity = 15;

		Item arr[] = new Item[size];
		arr[0] = new Item(10, 2, 0);
		arr[1] = new Item(10, 4, 1);
		arr[2] = new Item(12, 6, 2);
		arr[3] = new Item(18, 9, 3);

		solve(arr);
	}
}